<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title><%= product.SHname %> - harishMobile</title>
    <script
      src="https://kit.fontawesome.com/3a523928fc.js"
      crossorigin="anonymous"
    ></script>
    <link rel="stylesheet" href="/css/storeHeader.css" />
    <link rel="stylesheet" href="/css/detailPage.css" />
  </head>
  <body>
    <%- include(`../partials/storeHeader`) %>
    <%- include(`../partials/fonts`) %>
    <%- include(`../partials/cartAddToast`) %>
    <script src="/javascript/store.js"></script>
   <script>
document.addEventListener('DOMContentLoaded', () => {
  // Elements
  const specsSection = document.getElementById('specs') || document.querySelector('.specs-section');
  const specsTiles = document.getElementById('specsTiles') || (specsSection && specsSection.querySelector('.specs-tiles'));
  let seeMoreBtn = document.getElementById('seeMoreBtn') || (specsSection && specsSection.querySelector('#seeMoreBtn'));

  if (!specsTiles) return; // nothing to do

  const allTiles = Array.from(specsTiles.querySelectorAll('.spec-tile'));
  const visibleCount = 3;
  let expanded = false;

  /* ---------------- Prepare each spec-body for a reliable transition ---------------- */
  allTiles.forEach((tile, i) => {
    const head = tile.querySelector('.spec-head');
    const body = tile.querySelector('.spec-body');

    // Make sure body can animate using max-height
    if (body) {
      body.style.boxSizing = 'border-box';
      body.style.overflow = 'hidden';
      // Set a safe transition (will not override if already set inline)
      body.style.transition = body.style.transition || 'max-height 260ms ease';
      // Remove hidden attribute (if present) and control via maxHeight
      if (body.hasAttribute('hidden')) body.removeAttribute('hidden');

      // If tile was pre-marked open, keep it open
      if (tile.classList.contains('open')) {
        body.style.maxHeight = body.scrollHeight + 'px';
        head && head.setAttribute('aria-expanded', 'true');
      } else {
        body.style.maxHeight = '0px';
        head && head.setAttribute('aria-expanded', 'false');
      }
    }

    // Initial tile visibility for "see more" behaviour
    if (allTiles.length > visibleCount) {
      tile.style.display = i < visibleCount ? 'block' : 'none';
    } else {
      tile.style.display = 'block';
    }

    // Header click toggles this tile
    if (head) {
      head.addEventListener('click', () => {
        const isOpen = tile.classList.toggle('open');
        head.setAttribute('aria-expanded', isOpen ? 'true' : 'false');

        if (!body) return;

        if (isOpen) {
          // Expand: set to scrollHeight then after transition allow 'none' so content can flow
          body.style.maxHeight = body.scrollHeight + 'px';
          const onEnd = () => {
            // keep it open but remove fixed height to accommodate dynamic content
            if (tile.classList.contains('open')) body.style.maxHeight = 'none';
            body.removeEventListener('transitionend', onEnd);
          };
          body.addEventListener('transitionend', onEnd);
        } else {
          // Collapse: if maxHeight is 'none', first set it to current scrollHeight to start transition
          if (body.style.maxHeight === 'none') {
            body.style.maxHeight = body.scrollHeight + 'px';
            requestAnimationFrame(() => {
              body.style.maxHeight = '0px';
            });
          } else {
            body.style.maxHeight = '0px';
          }
        }
      });
    }
  });

  /* ---------------- Ensure See More button exists (create if missing) ---------------- */
  if (!seeMoreBtn) {
    const wrap = document.createElement('div');
    wrap.className = 'see-more-wrap';
    const btn = document.createElement('button');
    btn.id = 'seeMoreBtn';
    btn.className = 'see-more-btn';
    btn.type = 'button';
    btn.textContent = 'See more';
    wrap.appendChild(btn);
    // Append after the tiles container (keeps markup neat)
    specsTiles.parentElement.appendChild(wrap);
    seeMoreBtn = btn;
  }

  /* ---------------- Initial SeeMore visibility & collapsed overlay ---------------- */
  if (allTiles.length > visibleCount) {
    seeMoreBtn.style.display = 'block';
    specsTiles.style.opacity = '0.6';
    specsSection && specsSection.classList.add('collapsed');
  } else {
    seeMoreBtn.style.display = 'none';
  }

  /* ---------------- See More / See Less toggle ---------------- */
  seeMoreBtn.addEventListener('click', () => {
    expanded = !expanded;

    if (expanded) {
      // Reveal all tiles (but do NOT auto-open individual spec bodies)
      allTiles.forEach(tile => (tile.style.display = 'block'));
      seeMoreBtn.textContent = 'See less';
      specsTiles.style.opacity = '1';
      specsSection && specsSection.classList.remove('collapsed');
    } else {
      // Hide extras and restore collapsed state
      allTiles.forEach((tile, i) => {
        tile.style.display = i < visibleCount ? 'block' : 'none';
      });
      seeMoreBtn.textContent = 'See more';
      specsTiles.style.opacity = '0.6';
      specsSection && specsSection.classList.add('collapsed');
      // bring the section into view so user sees top of specs
      specsTiles.scrollIntoView({ behavior: 'smooth', block: 'start' });
    }
  });

  /* ---------------- Recompute expanded tile heights on resize ---------------- */
  window.addEventListener('resize', () => {
    allTiles.forEach(tile => {
      const body = tile.querySelector('.spec-body');
      if (!body) return;
      if (tile.classList.contains('open')) {
        // recompute and keep open
        body.style.maxHeight = body.scrollHeight + 'px';
        setTimeout(() => {
          if (tile.classList.contains('open')) body.style.maxHeight = 'none';
        }, 300);
      }
    });
  });
});
</script>



    <a class="back-btn" href="/"><i class="fa-solid fa-arrow-left"></i>  Back</a>

    <!-- Product detail slider -->
<div id="upwrapIS">
  <section id="imageSlider">
    <div class="carousel" id="carousel">
      <div class="carousel-track">
        <% if (product.productDetail && product.productDetail.images && product.productDetail.images.length) { %>
          <!-- First image -->
          <img id="slide" src="/uploads/<%= product.productDetail.images[0] %>" alt="Detail 1" />

          <!-- Video goes second if exists -->
          <% if (product.productDetail.video) { %>
            <video id="slide" src="/uploads/<%= product.productDetail.video %>" controls></video>
          <% } %>

          <!-- Remaining images -->
          <% product.productDetail.images.slice(1).forEach(function(img, idx) { %>
            <img id="slide" src="/uploads/<%= img %>" alt="Detail <%= idx+2 %>" />
          <% }); %>
        <% } %>
      </div>
      <div class="carousel-dots" id="dots"></div>
    </div>
  </section>
</div>

<!-- Product title + category -->
<div class="pd-head">
  <% const categoryLabel = { SH: 'Refurbished', N: 'New' }[product.category]; %>
  <h1 class="pd-title">
    <%= product.name %><%= categoryLabel ? ' - ' + categoryLabel : '' %>
  </h1>
</div>



<!-- Condition + Specs -->
<% 
  const _s = v => (v == null ? '' : String(v).trim());
  const ramV = _s(product.specs?.memory?.ram);
  const stoV = _s(product.specs?.memory?.storage);
  const colV = _s(product.specs?.design?.color);
  const addGB = v => v ? (/\d/.test(v) && !/gb/i.test(v) ? `${v}GB` : v) : '';
  const ram = addGB(ramV);
  const storage = addGB(stoV);
%>

<div class="pd-specs">
  <% if (product.condition) { %>
    <div class="detail-row">
      <span class="detail-label">Condition :</span>
      <span class="detail-value"><%= product.condition %></span>
    </div>
  <% } %>

  <% if (ram) { %>
    <div class="detail-row">
      <span class="detail-label">RAM :</span>
      <span class="detail-value"><%= ram %></span>
    </div>
  <% } %>

  <% if (storage) { %>
    <div class="detail-row">
      <span class="detail-label">Storage :</span>
      <span class="detail-value"><%= storage %></span>
    </div>
  <% } %>

  <% if (colV) { %>
    <div class="detail-row">
      <span class="detail-label">Color :</span>
      <span class="detail-value"><%= colV %></span>
    </div>
  <% } %>
</div>

<!-- Price Section -->
<div class="pd-price">
  <div class="price-current">₹<%= product.price %></div>
  
    <% if (product.mrp) { %>
    <div class="price-mrp"><s>₹<%= product.mrp %></s></div>
      <% } %>
      <% if (product.discount) { %>
    <div class="price-discount"><%= product.discount %>% Off</div>
  <% } %>
  
  
</div>

<!-- Assurance badges -->
<div class="assurance-wrap" aria-label="Assurance details">
  <div class="assurance-item" role="group" aria-label="7-day exchange">
    <i class="fa-solid fa-arrows-rotate" aria-hidden="true"></i>
    <span>7-day exchange</span>
  </div>

  <div class="assurance-item" role="group" aria-label="Secure delivered">
    <i class="fa-solid fa-truck-fast" aria-hidden="true"></i>
    <span>Secure delivered</span>
  </div>

  <div class="assurance-item" role="group" aria-label="No return allowed">
    <i class="fa-solid fa-ban" aria-hidden="true"></i>
    <span>No return allowed</span>
  </div>
</div>

<!-- Product Details / Specifications -->
<section class="specs-section" id="specs">
  <h2 class="specs-title">Specification</h2>

  <% 
    const sectionMap = [
      ['general','General'],
      ['backCamera','Rear Camera'],
      ['memory','Memory & Storage'],
      ['selfieCamera','Front Camera'],
      ['design','Design'],
      ['display','Display'],
      ['connectivity','Network & Connectivity'],
      ['performance','Performance'],
      ['battery','Battery'],
      ['sound','Sound'],
      ['sensors','Sensors'],
    ];
  %>

  <div class="specs-tiles" id="specsTiles">
    <% sectionMap.forEach(([key, label]) => {
         const sec = product.specs?.[key] || {};
         const entries = Object.entries(sec)
           .filter(([k,v]) => k !== 'merged' && v && String(v).trim() !== '');
         if (entries.length) { %>

      <div class="spec-tile">
        <button class="spec-head" type="button" aria-expanded="false">
          <span><%= label %></span>
          <i class="fa-solid fa-chevron-down" aria-hidden="true"></i>
        </button>

        <div class="spec-body" hidden>
          <ul class="spec-list">
            <% entries.forEach(([k, v]) => {
                 const prettyKeyMap = {
                   cpu:'Processor', ram:'RAM', storage:'Storage', wifi:'Wi-Fi',
                   bluetooth:'Bluetooth', jack:'3.5mm Jack', stereoSpeaker:'Stereo Speaker',
                   screenToBodyRatio:'Screen-to-body ratio', refreshRate:'Refresh rate',
                   peakBrightness:'Peak brightness', osSystem:'OS', osUpdates:'OS updates',
                   securityUpdates:'Security updates', chargingPort:'Charging port',
                   simSize:'SIM size', countryOfOrigin:'Country of origin',
                   video:'Video', type:'Type', capacity:'Capacity', charging:'Charging',
                   wirelessCharging:'Wireless charging', fingerprint:'Fingerprint',
                   other:'Other', dimensions:'Dimensions', buildMaterial:'Build material',
                   model:'Model', dualSim:'Dual SIM', protection:'Protection',
                   notch:'Notch', network:'Network', color:'Color', size:'Size',
                   resolution:'Resolution', weight:'Weight'
                 };
                 const pretty = prettyKeyMap[k] || k.replace(/([A-Z])/g, ' $1').replace(/^./, s => s.toUpperCase());
                 const val = (v instanceof Date || (typeof v === 'string' && !isNaN(Date.parse(v))))
                   ? new Date(v).toLocaleDateString('en-IN')
                   : v;
            %>
              <li>
                <span class="spec-name"><%= pretty %></span>
                <span class="spec-value"><%= val %></span>
              </li>
            <% }) %>
          </ul>
        </div>
      </div>

    <% } }); %>
  </div>

  <!-- See more / See less button -->
  <div class="see-more-wrap">
    <button id="seeMoreBtn" class="see-more-btn" type="button">See more</button>
  </div>
</section>



    <!-- <div class="product-details">
  <img src="/uploads/<%= product.image %>" alt="<%= product.name %>" width="300" />
  <h1><%= product.name %></h1>

  <% if (product.condition) { %>
    <p>Condition: <%= product.condition %></p>
  <% } %>

  <p>MRP: ₹<%= product.mrp %></p>
  <p>Discount: <%= product.discount %>%</p>
  <p>Price: ₹<%= product.price %></p> -->

  <form action="/cart/add" method="POST">
    <input type="hidden" name="productId" value="<%= product.id %>" />
    <input type="hidden" name="qty" value="1" />
    <input type="hidden" name="buyNow" value="true" />  <!-- 👈 Add this -->
    <button type="submit">Buy Now</button>
  </form>
</div>
  </body>
</html>
